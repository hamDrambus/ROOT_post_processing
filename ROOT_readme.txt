---------------------- -------------------- --------------------- ------------------- window_width: --------------------------|

0) Installing of the ROOT on windows follows the standard guide as far as I remember.

1) I used root_v5.34.34 and ran scripts in the root.exe via .L command. (before launching vsvars32.bat run is required)

2) In order to compile c++ code with root as library in visual studio, some settings are required:
//"root compile as library visual studio" in google-> http://www.pp.rhul.ac.uk/~connelly/tutorial/
It is not checked that all of the following steps are required. 'root' is the path to ROOT installation
	1) Add 'root\include', '...\boost_version' to Project Preferences->Configuration Properties->Include Directories,
	'root\lib' and 'root\bin' to Configuration Properties->Library Directories,
	source directory for user code (if is in not default vs folder) to Configuration Properties->Source Directories

	2) Add 'root\include' and '...\boost_version' to c/c++->General->Additional Include Directories
	
	3) Add _CRT_SECURE_NO_WARNINGS and __WIN32__ to c/c++->Preprocessor->Preprocessor Definitions

	4) Add 'root\include\w32pragma.h' to c/c++->Advanced->Forced Include Files

	5) Add 'root\lib' and 'root\bin' to Linker->General->Additional Library Directories

	6) Add 'root\lib\*.lib' to Linker->Input->Additional Dependencies

3) check code:

#include <TApplication.h>
#include <TCanvas.h>
#include <TF1.h>


int main(int argc, char *argv[])
{
	int n_par = 0;
	char **f = NULL;
	TApplication* app = new TApplication("test_app",&n_par,f);
	TCanvas* c1 = new TCanvas("test", "test_title", 800, 500);
	TF1 *func = new TF1("test_func", "sin(x)+5*x", 0, 10);
	func->Draw();
	app->Run();
	delete app;
	return 0;
}

/////////// Setups for eclipse IDE:
Setups:
C/C++ Build->Settings->
    GCC C++ Compiler->
	->Dialect->Other dialect flags: -std=c++11
	->Preprocessor->-D: NDEBUG
			    R__HAVE_CONFIG
	->Includes: /home/frolov/Software/root_v6.14.06/build/include
		    /home/frolov/Documents/Post_processor/include
	->Miscellaneous: -fPIC -pthread
    GCC C++ Linker->
	->General: -pthread
	->Libraries: Gui
Core
RIO
Net
Hist
Graf
Graf3d
Gpad
Tree
Rint
Postscript
Matrix
Physics
MathCore
Thread
MultiProc
Geom
m
Spectrum
Thread
	/home/frolov/Software/root_v6.14.06/build/lib
/home/frolov/Documents/Post_processor/include
	->Miscellaneous->Linker flags: -m64 -fPIC -fsigned-char -pipe -std=c++11

C/C++ General->Paths and Symbols->
    ->Source Location

4) For interactive program (Linux, see Windows below):
    1) Dictionary must be generated for CINT (c++ interpretator) to be able to use new code. Dictionary files (_dict.h _dict.cpp and dict.pcm) are generated by rootcint.
    It's convinient to call it automatically at pre-build step from IDE of choice. For that add 
	  rootcint -f ${CWD}/../../source/post_processor_dict.cpp -c -I${CWD}/../../include AllExperimentsResults.h AllRunsResults.h AnalysisManager.h AnalysisStates.h CalibrationInfo.h EventCut.h ExperimentArea.h FunctionWrapper.h GlobalDefinitions.h GlobalParameters.h GraphicOutputManager.h HistogramSetups.h Polynom2Order.h PolynomialFit.h PostProcessor.h Savitzky_Golay_filter.h SignalOperations.h SingleRunData.h SingleRunResults.h main.h LinkDef.h
	LinkDef.h must be the last. About it and the process itself in the links below:
	[https://root.cern.ch/interacting-shared-libraries-rootcint] - General overview.
	[https://root.cern.ch/root/html534/guides/users-guide/AddingaClass.html] - In detail about LinkDef.h
	The fact that adding -I$(PATH) is possible is from "rootcint -h" output and the web.
    Since rootcinc could not build dictionary for std::deque<TSomeROOTClass> because, I suspect, of internal bug, I had to turn off linking all classes (#pragma link C++ all class;)
    and instead link only classes defined by me using "#pragma link C++ defined_in "IncludeFile.h";"
	
!!! 2) {std::function, override, = default} are not supported in CINT! (compiled lambda functoins are ok, but they can't be typedefined, or used as parameters via std::function)
    
    3) Make sure that the flags used for compiling shared library (passed to gcc) to be loaded in ROOT are the same (except optimization, debug level and -w (warnings) flags)
    as those used by ACLIC (ROOT) when compileing interpreted code with ".L name.cpp+". The flags which are used by ROOT can be viewed using gSystem methods (from ROOT itself)
    (see TSystem class ref.):
	gSystem->GetMakeSharedLib() //describes with which command compiler is called. Some environment variables such as $IncludePath are controllable
	//(via. gSystem->SetIncludePath("-I$ROOTSYS/include -I/your/path/to/include") or gInterpreter->AddIncludePath("/your/path/to/include");)
	//flags starting with -w may be ignored as they controll warnings.
	//$Opt are debugging and optimization flags which can be determined from
	gSystem->GetFlagsOpt()   //optimization and
	gSystem->GetFlagsDebug() //debug level
	//Again, debug, warning and optimization options for compiling user library may do not match ROOT's ones.
	
    4) build shared (.so) library with right flags. (do not forget to include dictionary.cpp file into build)
    
    5) In order to load library some directories must be set withing ROOT (see loader.cpp):
	gSystem->SetIncludePath("-I$ROOTSYS/include -I/...../include -I/...../source -I/...../build/Debug");//where /Debug contains user library from step (4) 
	gSystem->AddDynamicPath("/...../build/Debug"); //so root can find "libtarget.so"
	gSystem->AddDynamicPath("/...../source"); //assuming dictionary.cpp was generated in source directory, root will need to load some other generated by rootcint files (.pcm).
	
    6) gSystem->Load("libtarget.so"); //integrates used code and CINT. There is still some problem with namspaces, for example typing "SignalOperations::integrate(...);"
    will fail with unresolved error, yet dict.cpp contains names of functions which indicates they were linked. Use the following trick:
      Type SignalO and the TAB so ROOT autocopletes the namespace. After :: also press TAB and choose method to use. In this way there's no resolving errors. 
    
	
5) For interactive program (Windows 7, VS 2015):
	(done with root_5.34.34)
	1) Generating dictionaty with rootcint:
		add pre-build step into IDE:
		rootcint -v -f "$(ProjectDir)..\..\source\post_processor_dict.cpp" -c -I"$(VC_IncludePath)" -I"$(WindowsSDK_IncludePath)" -I"$(ProjectDir)..\..\include" -D__WIN32__ AllExperimentsResults.h AllRunsResults.h AnalysisManager.h AnalysisStates.h CalibrationInfo.h EventCut.h ExperimentArea.h FunctionWrapper.h GlobalDefinitions.h GlobalParameters.h GraphicOutputManager.h HistogramSetups.h Polynom2Order.h PolynomialFit.h HistogramSetups.h PostProcessor.h Savitzky_Golay_filter.h SignalOperations.h SingleRunData.h SingleRunResults.h main.h LinkDef.h
		LinkDef is the same as for linux
	
		This is hopeless. rootcint could not find <direct.h> library, event with -p flag for using compiler's preprocessor.
		I tried to wrap it into #ifndef __CINT__, but there are other errors:
		error : class,struct,union or type size_t not defined (for enum Type: std::size_t {...))
		Removing size_t from enumeration did the trick! Moving on:
	2) add post_processor_dict.cpp to the project
	3) Compiling .lib (static) library: get flags from gSystem->GetMakeSharedLib() (see above 4)).
		gSystem->GetMakeSharedLib():
		"cl $Opt -nologo -TP -c -nologo -IC:/build/workspace/root-release-5.34/BUILDTYPE/Release/COMPILER/vc12/LABEL/win7/sources/root_v5.34.34/root/build/win -FIw32pragma.h -FIsehmap.h -MD -GR -EHsc- -W3 -wd4244 -D_WIN32 /MP  $IncludePath $SourceFiles -Fo$ObjectFiles && bindexplib $LibName $ObjectFiles > $BuildDir\\$LibName.def && lib -nologo -MACHINE:IX86 -out:$BuildDir\\$LibName.lib $ObjectFiles -def:$BuildDir\\$LibName.def && link -nologo $ObjectFiles -DLL -out:$BuildDir\\$LibName.dll $BuildDir\\$LibName.exp -LIBPATH:%ROOTSYS%\\lib  $LinkedLibs libCore.lib libCint.lib kernel32.lib advapi32.lib user32.lib gdi32.lib comdlg32.lib winspoo l.lib && if EXIST \"$BuildDir\\$LibName.dll.manifest\"
Googling flags in order:
		-TP - C/C++->All Options->Compile As-> TP, but may be ignored
		-c - keep comments, may be ignored
		-IC:/build/workspace/root-release-5.34/BUILDTYPE/Release/COMPILER/vc12/LABEL/win7/sources/root_v5.34.34/root/build/win - no idea, presumably only for compiling root itself.
		-FIw32pragma.h -FIsehmap.h - two forcebly included (-FI) files. The 1st one is the standard, the latter is added (C++->Advanced->Forced Include File
		-MDd is left instead of -MD
		-GR C++->All Options->Enable Run-time Type Information
		-MACHINE:IX86 as far as I know it's the same as X86. Also this flag is for linker (bindexplib) and only takes effect if linker cannot determine target machine from object files.

	Compilation issues:
		enumeration types must be public
		same for protected nested classes and any typedifines
		And for the dessert: dictionary file can't be compiled: missing identifiers and ambiguous calls.
		Can't find remedy, will try to switch to ROOT v6 (Cling instead of CINT).
	
6) For interactive program (Windows 7, VS 2017):
	(done with root_6.16.00, requires VS 2017)
	1) First compile the code on new root and VS
		Issues: no GSL random generators. Used boost instead for gamma distribution
	2) rootcling -v -f "$(ProjectDir)..\..\source\post_processor_dict.cpp" -I"$(ProjectDir)..\..\include" -D__WIN32__ AllExperimentsResults.h AllRunsResults.h AnalysisManager.h AnalysisStates.h CalibrationInfo.h EventCut.h ExperimentArea.h FunctionWrapper.h GlobalDefinitions.h GlobalParameters.h GraphicOutputManager.h HistogramSetups.h Polynom2Order.h PolynomialFit.h HistogramSetups.h PostProcessor.h Savitzky_Golay_filter.h SignalOperations.h SingleRunData.h SingleRunResults.h main.h LinkDef.h
	returns errors (C:\...\Visual Studio...\MSVC\14.10.25017\include\string and other files, _Memcpy_move_size error).
	Remedy: [https://root-forum.cern.ch/t/unable-to-build-on-windows-with-latest-cling/28305/5]
	Basically my VS was installed not into default llocation, and since VS does not use regystry anymore, it is necessary to set VCToolsInstallDir env variable to F:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.10.25017
	Friendly reminder that if environment variable is created/changed, for it to take an effect, programms must be restarted.
	Now there are different rootcling errors: cannot find <new> and <vcruntime.h> files.
	Trying to run in VS command prompt (run "F:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\VsDevCmd.bat", then set VCToolsInstallDir=F:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.10.25017) - does not work at all.

	Attemting to comppile simple script using cling in root/macros.
	Pfff. Turns out root can't be launched with the same error: can't find <new> file
	Attemting to install root from installer.
	Neither version 06.14.16 nor 06.16.00 work (failed to run root)

	Conclusion: Do not use ROOT on Windows
	