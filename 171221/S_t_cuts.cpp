{
  S_T_to_exclude.resize(25);
  S_min_thresholds.resize(25);
  S_min_thresholds = {0.0007, 0.0005, 0.0007, 0.0005, 0.0005, 0.0005, 0.0004, 0.0004, 0.0005, 0.0004, 0.0006, 0.0005, 0.0003, 
		0.0005, 0.0004, 0.0004, 0.0005, 0.00055, 0.00055, 0.00045, 0.0005, 0.0004, 0.0005, 0.0005, 0.0006};
	  
  /*32*/S_T_to_exclude[0] = {32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*33*/S_T_to_exclude[1] = {32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*34*/S_T_to_exclude[2] = {32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*35*/S_T_to_exclude[3] = {32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*36*/S_T_to_exclude[4] = {32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*37*/S_T_to_exclude[5] = {32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*38*/S_T_to_exclude[6] = {32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*39*/S_T_to_exclude[7] = {32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*40*/S_T_to_exclude[8] = {32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*41*/S_T_to_exclude[9] = {32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*42*/S_T_to_exclude[10] ={32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*43*/S_T_to_exclude[11] ={32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};  
  /*44*/S_T_to_exclude[12] ={32, 35, 0, 1, 45, 48, 0, 0.0005, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0005, 137, 140, 0, 0.0005};
  /*48*/S_T_to_exclude[13] ={32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*49*/S_T_to_exclude[14] ={32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*50*/S_T_to_exclude[15] ={32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*51*/S_T_to_exclude[16] ={32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*52*/S_T_to_exclude[17] ={32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*53*/S_T_to_exclude[18] ={32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*54*/S_T_to_exclude[19] ={32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*55*/S_T_to_exclude[20] ={32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*56*/S_T_to_exclude[21] ={32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*57*/S_T_to_exclude[22] ={32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*58*/S_T_to_exclude[23] ={32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  /*59*/S_T_to_exclude[24] ={32, 35, 0, 1, 45, 48, 0, 0.0006, 75.5, 77, 0, 0.0006, 109, 112.5, 0, 0.0006, 137, 140, 0, 0.0005};
  
  //Temporary remove central MPPCs
  /*36S_T_to_exclude[4] = {0, 160, 0, 2};
  38S_T_to_exclude[6] = {0, 160, 0, 2};
  39S_T_to_exclude[7] = {0, 160, 0, 2};
  40S_T_to_exclude[8] = {0, 160, 0, 2};
  41S_T_to_exclude[9] = {0, 160, 0, 2};
  50S_T_to_exclude[15] ={0, 160, 0, 2};
  51S_T_to_exclude[16] ={0, 160, 0, 2};
  53S_T_to_exclude[18] ={0, 160, 0, 2};
  56S_T_to_exclude[21] ={0, 160, 0, 2};
  */
  S2_times.resize(6);
  S2_times[0]= std::pair<double,double>(42, 100);//10
  S2_times[1]= std::pair<double,double>(40, 90);//12
  S2_times[2]= std::pair<double,double>(40, 90);//14
  S2_times[3]= std::pair<double,double>(40, 90);//16
  S2_times[4]= std::pair<double,double>(40, 90);//18
  S2_times[5]= std::pair<double,double>(40, 90);//20
}
